= partial '../partials/mongoid_v4', locals: { page: 'callbacks' }

- content_for :head do
  %title Mongoid: Callbacks

%h1 Callbacks

.page-nav
  .container
    %ul.nav.nav-pills
      %li= link_to "Document Callbacks", "#callbacks"
      %li= link_to "Relation Callbacks", "#relation_callbacks"

%section#callbacks
  %h2 Document Callbacks

  %p
    Mongoid supports the following callbacks:

    %ul
      %li <code>after_initialize</code>
      %li <code>after_build</code>
      %li <code>before_validation</code>
      %li <code>after_validation</code>
      %li <code>before_create</code>
      %li <code>around_create</code>
      %li <code>after_create</code>
      %li <code>after_find</code> <span class="label label-info">Since 3.1.0</span>
      %li <code>before_update</code>
      %li <code>around_update</code>
      %li <code>after_update</code>
      %li <code>before_upsert</code>
      %li <code>around_upsert</code>
      %li <code>after_upsert</code>
      %li <code>before_save</code>
      %li <code>around_save</code>
      %li <code>after_save</code>
      %li <code>before_destroy</code>
      %li <code>around_destroy</code>
      %li <code>after_destroy</code>

  %p
    Callbacks are available on any document, whether it is embedded within
    another document or not. Note that to be efficient, Mongoid only fires
    the callback of the document that the persistence action was executed on.
    This is that Mongoid aims to support large hierarchies and to handle
    optimized atomic updates callbacks can't be firing all over the document
    hierarchy.

  .well
    %table
      %tr
        %td.achtung= image_tag "/images/achtung.png"
        %td.note
          %p
            Using callbacks for domain logic is a bad design practice, and can
            lead to unexpected errors that are hard to debug when callbacks in
            the chain halt execution. It is our recommendation to only use them
            for cross-cutting concerns, like queueing up background jobs.

  :coderay
    #!ruby
    class Article
      include Mongoid::Document
      field :name, type: String
      field :body, type: String
      field :slug, type: String

      before_create :send_message

      after_save do |document|
        # Handle callback here.
      end

      protected
      def send_message
        # Message sending code here.
      end
    end

  %p
    Callbacks are coming from Active Support, so you can use the new
    syntax as well:

  :coderay
    #!ruby
    class Article
      include Mongoid::Document
      field :name, type: String

      set_callback(:create, :before) do |document|
        # Message sending code here.
      end
    end

%section#relation_callbacks
  %h2
    Relation Callbacks

  %span.label.label-info Since 3.1.0

  %p
    Mongoid has a set of callbacks that are specific to collection based relations - these are:

    %ul
      %li <code>after_add</code>
      %li <code>after_remove</code>
      %li <code>before_add</code>
      %li <code>before_remove</code>

  %p
    Each time a document is added or removed from any of the following relations,
    the respective callbacks are fired: <code>embeds_many</code>,
    <code>has_many</code>, and <code>has_and_belongs_to_many</code>.

  %p
    Relation Callbacks are specified as an option on the relation. The element added/removed is the parameter to the method you call via the callback. Example:

    :coderay
      #!ruby
      class Person
        include Mongoid::Document

        has_many :posts, after_add: :send_email_to_subscribers
      end

      def send_email_to_subscribers(post)
        Notifications.new_post(post).deliver
      end
